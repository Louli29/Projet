import random
def generate_random_map(size_map,proportion_wall):
    m=[[0 for i in range(size_map[0])]for i in range (size_map[1])]
    nb_w=0
    h=random.randint(0,size_map[1]-1) #pour que la position de entré et sortie soit aléatoire
    g=random.randint(0,size_map[0]-1)
    k=random.randint(0,size_map[0]-1)
    l=random.randint(0,size_map[0]-1)
    m[h][g]=2
    
    m[k][l]=3
    coord_perso=(h,g)
    while nb_w < (proportion_wall*size_map[0]*size_map[1]):
        a=random.randint(0,size_map[1]-1)
        b=random.randint(0,size_map[0]-1)
        if m[a][b]==0: #pour verifier qu'aucun mur ne soit present sur l'entré ou sortie
            m[a][b]=1
        nb_w+=1
    return m

def coord_entré(m): #matrice m 
    tuple=(0,0)
    for i in range(len(m)):
        for j in range(len(m[0])): #ici je cherche dans tt la matrice la coord de l'entré et je le renvoi sous forme de tuple
            if m[i][j]==2:
                tuple=(i,j)
                
    return tuple
                

def create_perso(depart,ancien_score): #depart couple (x depart, y depart)
    d={}
    d["char"]="o"
    d["x"]=depart[0]
    d["y"]=depart[1]
    d["score"]=ancien_score
    return d #dictionnaire 

def delete_all_walles(m,pos):
    a = pos[0]
    b = pos[1]
    for i in range(a-1,a+2):
        for j in range(b-1,b+2):
            if m[i][j]!=3:
                m[i][j]=0
    return m

def update_p(letter,p,m):#p dico position personnage et m matrice map
    if letter=="d" :
        if p["y"]+1<len(m[0]) and m[p["x"]][p["y"]+1]==0:
            p["y"]+=1
        elif p["y"]+1<len(m[0]) and m[p["x"]][p["y"]+1]==3: #pour pouvoir aller sur le X sans depasser la taille de m
            p["y"]+=1
        elif p["y"]+1<len(m[0]) and m[p["x"]][p["y"]+1]==2: 
            p["y"]+=1
    if letter=="q":
        if m[p["x"]][p["y"]-1]==0:
            p["y"]-=1
        elif m[p["x"]][p["y"]-1]==3:
            p["y"]-=1
        elif m[p["x"]][p["y"]-1]==2:
            p["y"]-=1
    if letter=="z":
        if m[p["x"]-1][p["y"]]==0:
            p["x"]-=1
        elif m[p["x"]-1][p["y"]]==3:
            p["x"]-=1
        elif m[p["x"]-1][p["y"]]==2:
            p["x"]-=1
    if letter=="s" :
        if p["x"]+1<len(m) and m[p["x"]+1][p["y"]]==0:
            p["x"]+=1
        elif p["x"]+1<len(m) and m[p["x"]+1][p["y"]]==3:
            p["x"]+=1
        elif p["x"]+1<len(m) and m[p["x"]+1][p["y"]]==2:
            p["x"]+=1
    if p["x"] <0:
        p["x"]=0
    if p["y"]<0:
        p["y"]=0
    if letter=="e":
        coor=(p["x"],p["y"])
        delete_all_walles(m,coor)
        
    return p


def create_object (nb_objects,m):
    objects=set()
    i=0
    while i < (nb_objects):
        x=random.randint(0,len(m)-1)
        y=random.randint(0,len(m[0])-1)
        if m[x][y]==0:
            objects.add((x,y))
            i+=1
    return objects # renvoie un ensemble de couple
            
 
def update_objects (p,objects):
    if (p["x"],p["y"]) in objects:
            objects.discard((p["x"],p["y"]))
            p["score"]+=1
    return objects
     


def display_map_char_and_objects (m,d,p,objects):# m matrice map, dico des murs, p dico position personnage 
    L=[[None for a in range (len(m[0]))] for b in range(len(m))]
    for i in range (len(m)):
        for j in range (len(m[0])):
            for k in d:
                if m[i][j]==k:
                    L[i][j]=d[k]
                    
    for a in objects:
        L[a[0]][a[1]]="."

    L[p["x"]][p["y"]]="o"
    return L

def create_new_level(p,m,obj,size_map,proportion_wall):#p le perso(dico),m la map (matrice), obj les objets, size-map (tuple), proportion(float)z
    d={0:" ",1:"#",2:" ",3:"X"}
    p=create_perso(coord_entré(map),ancien_score)
    L=display_map_char_and_objects(m,d,p,objects) #affichage simple
    return L



def affichage(M,d,p,objects): # permet d'afficher correctement la map avec les bons retour à la ligne
    m=display_map_char_and_objects(M,d,p,objects)
    for a in range(len(m)):
        for b in range (len (m[0])):
            print (m[a][b],end="")
        print(end="\n")
    
    print(p["score"]) 
    return""
                


dico = {0:' ',1:'#',2:' ',3:'X'}


lettre="q"

ancien_score=0
map=generate_random_map((4,5),0.2)
p=create_perso(coord_entré(map),ancien_score)

objects=create_object(3,map)

print(affichage (map,dico,p,objects))

    
while True:
    
    if map[p["x"]][p["y"]]!=3:
        lettre=input("on avance vers où ? ")
        p=update_p(lettre,p,map)
        objects=update_objects(p,objects)
        if map[p["x"]][p["y"]]!=3:
            print(affichage(map,dico,p,objects))

    else :
        map=generate_random_map((4,5),0.2)#générer la nouvelle map aléatoire
        L=create_new_level(p,map,objects,(4,5),0.2)
        print(affichage(map,dico,p,objects))
        lettre=input("on avance vers où ? ")
        p=update_p(lettre,p,map)
        objects=update_objects(p,objects)
        print(affichage(map,dico,p,objects))
        ancien_score=p["score"]
        
    
    
    
    

    
    


